# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Location {
  latitude: Float!
  longitude: Float!
}

type Place {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  originalId: String!
  googleMapsUri: String!
  location: Location!
  name: String!
  imgSrc: String!
  predictedSalesPercentage: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String
  filename: String
  provider: String!
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  recoveryCode: String
  image: File
}

type UserWithToken {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  recoveryCode: String
  image: File
  token: String!
  provider: String!
}

type GeolocationEntity {
  placeId: String!
  latitude: Float!
  longitude: Float!
  country: String
  locality: String
  route: String
  streetNumber: String
}

type Event {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  totalTicketsCount: Float!
  minTicketPrice: Float!
  startDate: DateTime!
  endDate: DateTime!
  author: User!
  horizontalImage: File!
  verticalImage: File!
  place: Place!
  distance: Float
}

type EventPage {
  items: [Event!]!
  totalPagesCount: Int
}

type Highlight {
  text: String!
  isMatch: Boolean!
}

type SearchEventResult {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  totalTicketsCount: Float!
  minTicketPrice: Float!
  startDate: DateTime!
  endDate: DateTime!
  author: User!
  horizontalImage: File!
  verticalImage: File!
  place: Place!
  distance: Float
  titleHighlightParts: [Highlight!]!
}

type SearchEventPage {
  items: [SearchEventResult!]!
  totalPagesCount: Int
}

type MatchedSubstring {
  length: Float!
  offset: Float!
}

type StructuredFormatting {
  mainText: String!
  mainTextMatchedSubstrings: [MatchedSubstring!]!
  secondaryText: String
}

type AutocompletePlacesPrediction {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  originalId: String!
  googleMapsUri: String!
  location: Location!
  name: String!
  imgSrc: String!
  predictedSalesPercentage: Float
  structuredFormatting: StructuredFormatting!
}

type AutocompletePlacesPredictionPage {
  items: [AutocompletePlacesPrediction!]!
  totalPagesCount: Int
}

type PlacePage {
  items: [Place!]!
  totalPagesCount: Int
}

type Category {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  eventsCount: Float!
  events(skip: Int, limit: Int): EventPage!
}

type CategoryPage {
  items: [Category!]!
  totalPagesCount: Int
}

type Review {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  stars: Int!
  user: User!
}

type DeleteResult {
  isSuccess: Boolean!
  deletedCount: Float!
}

type DumpDbResult {
  isSuccess: Boolean!
  insertedCount: Float!
}

type Card {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Ticket {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  peopleCount: Float!
}

type Query {
  getMe: User!
  getGeolocationByCoords(latitude: Float!, longitude: Float!): GeolocationEntity!
  getEvents(skip: Int, limit: Int, shouldReturnSoonest: Boolean): EventPage!
  getEventById(id: Float!, originId: String!): Event!
  autocompleteEvents(input: AutocompleteEventsInput!): SearchEventPage!
  searchEvents(input: SearchEventsInput!): SearchEventPage!
  autocompletePlaces(input: AutocompletePlacesInput!): AutocompletePlacesPredictionPage!
  getRecommendedPlaces(skip: Int!, limit: Int!, maxImageHeight: Float!): PlacePage!
  getCategories(skip: Int, limit: Int, shouldReturnAll: Boolean): CategoryPage!
  getCategoryById(id: Float!): Category!
  getPreferredCategoriesByUser(id: Int!): [Category!]!
  checkIfCategoryTranslationExists(input: CheckIfCategoryTranslationExistsInput!): Boolean!
}

input AutocompleteEventsInput {
  query: String!
  skip: Float!
  limit: Float!
}

input SearchEventsInput {
  query: String!
  skip: Float!
  limit: Float!
}

input AutocompletePlacesInput {
  skip: Float!
  limit: Float!
  query: String!
  shouldGetFromGooglePlaces: Boolean!
  maxImageHeight: Float
}

input CheckIfCategoryTranslationExistsInput {
  name: String!
  language: Language!
}

enum Language {
  EN
  UK
  ES
}

type Mutation {
  signUp(input: SignUpInput!): UserWithToken!
  login(input: LoginInput!): UserWithToken!
  loginWithGoogle(idToken: String!): UserWithToken!
  loginWithFacebook(accessToken: String!): UserWithToken!
  sendResetPasswordEmail(input: SendResetPasswordEmailInput!): Boolean!
  updateUserImage(input: UpdateUserImageInput!): File!
  deleteAccount: User!
  addEvent(input: AddEventInput!): Event!
  deleteEvent(id: Int!): Event!
  deletePlace(id: Int!): Place!
  addCategory(input: CategoryInput!): Category!
  updatePreferredCategories(categoryIds: [Int!]!): [Category!]!
  addReview(input: AddReviewInput!): Review!
  deleteAllUsers: DeleteResult!
  addCard(input: AddCardInput!): Card!
  buyTickets(input: BuyTicketsInput!): [Ticket!]!
  dumpDb: DumpDbResult!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input SendResetPasswordEmailInput {
  email: String!
}

input UpdateUserImageInput {
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AddEventInput {
  placeId: String!
  title: String!
  description: String!
  totalTicketsCount: Int!
  startDate: String!
  endDate: String!
  ticketVariants: [TicketVariant!]!
  cardId: Int!
  horizontalImage: Upload!
  verticalImage: Upload!
  categories: [Int!]!
}

input TicketVariant {
  price: Float!
  backgroundColor: String
  titleOptions: TicketTextElementInput
  startDateOptions: TicketTextElementInput
  priceOptions: TicketTextElementInput
  eventImageOptions: TicketImageElementInput
  qrCodeOptions: TicketImageElementInput!
}

input TicketTextElementInput {
  horizontalOffset: Float!
  verticalOffset: Float!
  text: String!
}

input TicketImageElementInput {
  horizontalOffset: Float!
  verticalOffset: Float!
  width: Float!
  height: Float!
}

input CategoryInput {
  translations: [CategoryTranslationInput!]!
}

input CategoryTranslationInput {
  name: String!
  language: Language!
}

input AddReviewInput {
  stars: Float!
  text: String!
  eventId: Float!
}

input AddCardInput {
  number: String!
  expirationMonth: Float!
  expirationYear: Float!
  cvc: String!
}

input BuyTicketsInput {
  cardId: Int!
  items: [BuyTicketsItemInput!]!
}

input BuyTicketsItemInput {
  ticketVariantId: Int!
  count: Int!
}